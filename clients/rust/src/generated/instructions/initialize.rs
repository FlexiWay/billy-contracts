//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct Initialize {
    pub authority: solana_program::pubkey::Pubkey,

    pub global: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl Initialize {
    pub fn instruction(
        &self,
        args: InitializeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.global,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = InitializeInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct InitializeInstructionData {
    discriminator: [u8; 8],
}

impl InitializeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InitializeInstructionArgs {
    pub initial_token_supply: u64,
    pub initial_real_sol_reserves: u64,
    pub initial_real_token_reserves: u64,
    pub initial_virtual_sol_reserves: u64,
    pub initial_virtual_token_reserves: u64,
    pub sol_launch_threshold: u64,
    pub fee_basis_points: u32,
}

/// Instruction builder for `Initialize`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[writable]` global
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Default)]
pub struct InitializeBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    global: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    initial_token_supply: Option<u64>,
    initial_real_sol_reserves: Option<u64>,
    initial_real_token_reserves: Option<u64>,
    initial_virtual_sol_reserves: Option<u64>,
    initial_virtual_token_reserves: Option<u64>,
    sol_launch_threshold: Option<u64>,
    fee_basis_points: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn global(&mut self, global: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global = Some(global);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn initial_token_supply(&mut self, initial_token_supply: u64) -> &mut Self {
        self.initial_token_supply = Some(initial_token_supply);
        self
    }
    #[inline(always)]
    pub fn initial_real_sol_reserves(&mut self, initial_real_sol_reserves: u64) -> &mut Self {
        self.initial_real_sol_reserves = Some(initial_real_sol_reserves);
        self
    }
    #[inline(always)]
    pub fn initial_real_token_reserves(&mut self, initial_real_token_reserves: u64) -> &mut Self {
        self.initial_real_token_reserves = Some(initial_real_token_reserves);
        self
    }
    #[inline(always)]
    pub fn initial_virtual_sol_reserves(&mut self, initial_virtual_sol_reserves: u64) -> &mut Self {
        self.initial_virtual_sol_reserves = Some(initial_virtual_sol_reserves);
        self
    }
    #[inline(always)]
    pub fn initial_virtual_token_reserves(
        &mut self,
        initial_virtual_token_reserves: u64,
    ) -> &mut Self {
        self.initial_virtual_token_reserves = Some(initial_virtual_token_reserves);
        self
    }
    #[inline(always)]
    pub fn sol_launch_threshold(&mut self, sol_launch_threshold: u64) -> &mut Self {
        self.sol_launch_threshold = Some(sol_launch_threshold);
        self
    }
    #[inline(always)]
    pub fn fee_basis_points(&mut self, fee_basis_points: u32) -> &mut Self {
        self.fee_basis_points = Some(fee_basis_points);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Initialize {
            authority: self.authority.expect("authority is not set"),
            global: self.global.expect("global is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = InitializeInstructionArgs {
            initial_token_supply: self
                .initial_token_supply
                .clone()
                .expect("initial_token_supply is not set"),
            initial_real_sol_reserves: self
                .initial_real_sol_reserves
                .clone()
                .expect("initial_real_sol_reserves is not set"),
            initial_real_token_reserves: self
                .initial_real_token_reserves
                .clone()
                .expect("initial_real_token_reserves is not set"),
            initial_virtual_sol_reserves: self
                .initial_virtual_sol_reserves
                .clone()
                .expect("initial_virtual_sol_reserves is not set"),
            initial_virtual_token_reserves: self
                .initial_virtual_token_reserves
                .clone()
                .expect("initial_virtual_token_reserves is not set"),
            sol_launch_threshold: self
                .sol_launch_threshold
                .clone()
                .expect("sol_launch_threshold is not set"),
            fee_basis_points: self
                .fee_basis_points
                .clone()
                .expect("fee_basis_points is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize` CPI accounts.
pub struct InitializeCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub global: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize` CPI instruction.
pub struct InitializeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub global: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeInstructionArgs,
}

impl<'a, 'b> InitializeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeCpiAccounts<'a, 'b>,
        args: InitializeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            global: accounts.global,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.global.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = InitializeInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.global.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Initialize` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[writable]` global
///   2. `[]` system_program
pub struct InitializeCpiBuilder<'a, 'b> {
    instruction: Box<InitializeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeCpiBuilderInstruction {
            __program: program,
            authority: None,
            global: None,
            system_program: None,
            initial_token_supply: None,
            initial_real_sol_reserves: None,
            initial_real_token_reserves: None,
            initial_virtual_sol_reserves: None,
            initial_virtual_token_reserves: None,
            sol_launch_threshold: None,
            fee_basis_points: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn global(
        &mut self,
        global: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global = Some(global);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn initial_token_supply(&mut self, initial_token_supply: u64) -> &mut Self {
        self.instruction.initial_token_supply = Some(initial_token_supply);
        self
    }
    #[inline(always)]
    pub fn initial_real_sol_reserves(&mut self, initial_real_sol_reserves: u64) -> &mut Self {
        self.instruction.initial_real_sol_reserves = Some(initial_real_sol_reserves);
        self
    }
    #[inline(always)]
    pub fn initial_real_token_reserves(&mut self, initial_real_token_reserves: u64) -> &mut Self {
        self.instruction.initial_real_token_reserves = Some(initial_real_token_reserves);
        self
    }
    #[inline(always)]
    pub fn initial_virtual_sol_reserves(&mut self, initial_virtual_sol_reserves: u64) -> &mut Self {
        self.instruction.initial_virtual_sol_reserves = Some(initial_virtual_sol_reserves);
        self
    }
    #[inline(always)]
    pub fn initial_virtual_token_reserves(
        &mut self,
        initial_virtual_token_reserves: u64,
    ) -> &mut Self {
        self.instruction.initial_virtual_token_reserves = Some(initial_virtual_token_reserves);
        self
    }
    #[inline(always)]
    pub fn sol_launch_threshold(&mut self, sol_launch_threshold: u64) -> &mut Self {
        self.instruction.sol_launch_threshold = Some(sol_launch_threshold);
        self
    }
    #[inline(always)]
    pub fn fee_basis_points(&mut self, fee_basis_points: u32) -> &mut Self {
        self.instruction.fee_basis_points = Some(fee_basis_points);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeInstructionArgs {
            initial_token_supply: self
                .instruction
                .initial_token_supply
                .clone()
                .expect("initial_token_supply is not set"),
            initial_real_sol_reserves: self
                .instruction
                .initial_real_sol_reserves
                .clone()
                .expect("initial_real_sol_reserves is not set"),
            initial_real_token_reserves: self
                .instruction
                .initial_real_token_reserves
                .clone()
                .expect("initial_real_token_reserves is not set"),
            initial_virtual_sol_reserves: self
                .instruction
                .initial_virtual_sol_reserves
                .clone()
                .expect("initial_virtual_sol_reserves is not set"),
            initial_virtual_token_reserves: self
                .instruction
                .initial_virtual_token_reserves
                .clone()
                .expect("initial_virtual_token_reserves is not set"),
            sol_launch_threshold: self
                .instruction
                .sol_launch_threshold
                .clone()
                .expect("sol_launch_threshold is not set"),
            fee_basis_points: self
                .instruction
                .fee_basis_points
                .clone()
                .expect("fee_basis_points is not set"),
        };
        let instruction = InitializeCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            global: self.instruction.global.expect("global is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct InitializeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    initial_token_supply: Option<u64>,
    initial_real_sol_reserves: Option<u64>,
    initial_real_token_reserves: Option<u64>,
    initial_virtual_sol_reserves: Option<u64>,
    initial_virtual_token_reserves: Option<u64>,
    sol_launch_threshold: Option<u64>,
    fee_basis_points: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
