/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** AlreadyInitialized: Global Already Initialized */
export class AlreadyInitializedError extends ProgramError {
  override readonly name: string = 'AlreadyInitialized';

  readonly code: number = 0x1770; // 6000
  
  constructor(program: Program, cause?: Error) {
    super('Global Already Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1770, AlreadyInitializedError);
nameToErrorMap.set('AlreadyInitialized', AlreadyInitializedError);

/** NotInitialized: Global Not Initialized */
export class NotInitializedError extends ProgramError {
  override readonly name: string = 'NotInitialized';

  readonly code: number = 0x1771; // 6001
  
  constructor(program: Program, cause?: Error) {
    super('Global Not Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1771, NotInitializedError);
nameToErrorMap.set('NotInitialized', NotInitializedError);

/** InvalidAuthority: Invalid Authority */
export class InvalidAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidAuthority';

  readonly code: number = 0x1772; // 6002
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Authority', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);

/** ProgramNotRunning: Not in Running State */
export class ProgramNotRunningError extends ProgramError {
  override readonly name: string = 'ProgramNotRunning';

  readonly code: number = 0x1773; // 6003
  
  constructor(program: Program, cause?: Error) {
    super('Not in Running State', program, cause);
  }
}
codeToErrorMap.set(0x1773, ProgramNotRunningError);
nameToErrorMap.set('ProgramNotRunning', ProgramNotRunningError);

/** InvalidArgument: Invalid Argument */
export class InvalidArgumentError extends ProgramError {
  override readonly name: string = 'InvalidArgument';

  readonly code: number = 0x1774; // 6004
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Argument', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidArgumentError);
nameToErrorMap.set('InvalidArgument', InvalidArgumentError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getLmaofunBondingCurveErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getLmaofunBondingCurveErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
