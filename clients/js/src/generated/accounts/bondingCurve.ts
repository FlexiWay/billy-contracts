/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, i64, mapSerializer, publicKey as publicKeySerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';
import { AllocationData, AllocationDataArgs, BondingCurveStatus, BondingCurveStatusArgs, BondingCurveSupplyAllocation, BondingCurveSupplyAllocationArgs, CurveSegment, CurveSegmentArgs, VestingTerms, VestingTermsArgs, getAllocationDataSerializer, getBondingCurveStatusSerializer, getBondingCurveSupplyAllocationSerializer, getCurveSegmentSerializer, getVestingTermsSerializer } from '../types';

  
  export type BondingCurve = Account<BondingCurveAccountData>;

  export type BondingCurveAccountData = { discriminator: Array<number>; mint: PublicKey; creator: PublicKey; cexAuthority: PublicKey; brandAuthority: PublicKey; status: BondingCurveStatus; realSolReserves: bigint; realTokenReserves: bigint; tokenTotalSupply: bigint; solLaunchThreshold: bigint; startTime: bigint; vestingTerms: VestingTerms; allocation: AllocationData; supplyAllocation: BondingCurveSupplyAllocation; curveSegments: Array<CurveSegment>; bump: number;  };

export type BondingCurveAccountDataArgs = { mint: PublicKey; creator: PublicKey; cexAuthority: PublicKey; brandAuthority: PublicKey; status: BondingCurveStatusArgs; realSolReserves: number | bigint; realTokenReserves: number | bigint; tokenTotalSupply: number | bigint; solLaunchThreshold: number | bigint; startTime: number | bigint; vestingTerms: VestingTermsArgs; allocation: AllocationDataArgs; supplyAllocation: BondingCurveSupplyAllocationArgs; curveSegments: Array<CurveSegmentArgs>; bump: number;  };


  export function getBondingCurveAccountDataSerializer(): Serializer<BondingCurveAccountDataArgs, BondingCurveAccountData> {
  return mapSerializer<BondingCurveAccountDataArgs, any, BondingCurveAccountData>(struct<BondingCurveAccountData>([['discriminator', array(u8(), { size: 8 })], ['mint', publicKeySerializer()], ['creator', publicKeySerializer()], ['cexAuthority', publicKeySerializer()], ['brandAuthority', publicKeySerializer()], ['status', getBondingCurveStatusSerializer()], ['realSolReserves', u64()], ['realTokenReserves', u64()], ['tokenTotalSupply', u64()], ['solLaunchThreshold', u64()], ['startTime', i64()], ['vestingTerms', getVestingTermsSerializer()], ['allocation', getAllocationDataSerializer()], ['supplyAllocation', getBondingCurveSupplyAllocationSerializer()], ['curveSegments', array(getCurveSegmentSerializer())], ['bump', u8()]], { description: 'BondingCurveAccountData' }), (value) => ({ ...value, discriminator: [23, 183, 248, 55, 96, 216, 172, 96] }) ) as Serializer<BondingCurveAccountDataArgs, BondingCurveAccountData>;
}


export function deserializeBondingCurve(rawAccount: RpcAccount): BondingCurve {
  return deserializeAccount(rawAccount, getBondingCurveAccountDataSerializer());
}

export async function fetchBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurve> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'BondingCurve');
  return deserializeBondingCurve(maybeAccount);
}

export async function safeFetchBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurve | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeBondingCurve(maybeAccount)
    : null;
}

export async function fetchAllBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurve[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BondingCurve');
    return deserializeBondingCurve(maybeAccount);
  });
}

export async function safeFetchAllBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurve[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBondingCurve(maybeAccount as RpcAccount));
}

export function getBondingCurveGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('billyBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'mint': PublicKey, 'creator': PublicKey, 'cexAuthority': PublicKey, 'brandAuthority': PublicKey, 'status': BondingCurveStatusArgs, 'realSolReserves': number | bigint, 'realTokenReserves': number | bigint, 'tokenTotalSupply': number | bigint, 'solLaunchThreshold': number | bigint, 'startTime': number | bigint, 'vestingTerms': VestingTermsArgs, 'allocation': AllocationDataArgs, 'supplyAllocation': BondingCurveSupplyAllocationArgs, 'curveSegments': Array<CurveSegmentArgs>, 'bump': number }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'mint': [8, publicKeySerializer()], 'creator': [40, publicKeySerializer()], 'cexAuthority': [72, publicKeySerializer()], 'brandAuthority': [104, publicKeySerializer()], 'status': [136, getBondingCurveStatusSerializer()], 'realSolReserves': [137, u64()], 'realTokenReserves': [145, u64()], 'tokenTotalSupply': [153, u64()], 'solLaunchThreshold': [161, u64()], 'startTime': [169, i64()], 'vestingTerms': [177, getVestingTermsSerializer()], 'allocation': [193, getAllocationDataSerializer()], 'supplyAllocation': [257, getBondingCurveSupplyAllocationSerializer()], 'curveSegments': [321, array(getCurveSegmentSerializer())], 'bump': [null, u8()] })
    .deserializeUsing<BondingCurve>((account) => deserializeBondingCurve(account))      .whereField('discriminator', [23, 183, 248, 55, 96, 216, 172, 96])
    ;
}


export function findBondingCurvePda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('billyBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("bonding-curve"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchBondingCurveFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurvePda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurve> {
  return fetchBondingCurve(context, findBondingCurvePda(context, seeds), options);
}

export async function safeFetchBondingCurveFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurvePda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurve | null> {
  return safeFetchBondingCurve(context, findBondingCurvePda(context, seeds), options);
}
