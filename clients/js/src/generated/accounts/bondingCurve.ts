/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, bool, mapSerializer, publicKey as publicKeySerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type BondingCurve = Account<BondingCurveAccountData>;

  export type BondingCurveAccountData = { discriminator: Array<number>; creator: PublicKey; virtualSolReserves: bigint; virtualTokenReserves: bigint; realSolReserves: bigint; realTokenReserves: bigint; tokenTotalSupply: bigint; complete: boolean;  };

export type BondingCurveAccountDataArgs = { creator: PublicKey; virtualSolReserves: number | bigint; virtualTokenReserves: number | bigint; realSolReserves: number | bigint; realTokenReserves: number | bigint; tokenTotalSupply: number | bigint; complete: boolean;  };


  export function getBondingCurveAccountDataSerializer(): Serializer<BondingCurveAccountDataArgs, BondingCurveAccountData> {
  return mapSerializer<BondingCurveAccountDataArgs, any, BondingCurveAccountData>(struct<BondingCurveAccountData>([['discriminator', array(u8(), { size: 8 })], ['creator', publicKeySerializer()], ['virtualSolReserves', u64()], ['virtualTokenReserves', u64()], ['realSolReserves', u64()], ['realTokenReserves', u64()], ['tokenTotalSupply', u64()], ['complete', bool()]], { description: 'BondingCurveAccountData' }), (value) => ({ ...value, discriminator: [23, 183, 248, 55, 96, 216, 172, 96] }) ) as Serializer<BondingCurveAccountDataArgs, BondingCurveAccountData>;
}


export function deserializeBondingCurve(rawAccount: RpcAccount): BondingCurve {
  return deserializeAccount(rawAccount, getBondingCurveAccountDataSerializer());
}

export async function fetchBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurve> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'BondingCurve');
  return deserializeBondingCurve(maybeAccount);
}

export async function safeFetchBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurve | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeBondingCurve(maybeAccount)
    : null;
}

export async function fetchAllBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurve[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BondingCurve');
    return deserializeBondingCurve(maybeAccount);
  });
}

export async function safeFetchAllBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurve[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBondingCurve(maybeAccount as RpcAccount));
}

export function getBondingCurveGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'creator': PublicKey, 'virtualSolReserves': number | bigint, 'virtualTokenReserves': number | bigint, 'realSolReserves': number | bigint, 'realTokenReserves': number | bigint, 'tokenTotalSupply': number | bigint, 'complete': boolean }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'creator': [8, publicKeySerializer()], 'virtualSolReserves': [40, u64()], 'virtualTokenReserves': [48, u64()], 'realSolReserves': [56, u64()], 'realTokenReserves': [64, u64()], 'tokenTotalSupply': [72, u64()], 'complete': [80, bool()] })
    .deserializeUsing<BondingCurve>((account) => deserializeBondingCurve(account))      .whereField('discriminator', [23, 183, 248, 55, 96, 216, 172, 96])
    ;
}

export function getBondingCurveSize(): number {
  return 81;
}

export function findBondingCurvePda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("bonding-curve"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchBondingCurveFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurvePda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurve> {
  return fetchBondingCurve(context, findBondingCurvePda(context, seeds), options);
}

export async function safeFetchBondingCurveFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurvePda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurve | null> {
  return safeFetchBondingCurve(context, findBondingCurvePda(context, seeds), options);
}
