/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type CreatorData = Account<CreatorDataAccountData>;

  export type CreatorDataAccountData = { discriminator: Array<number>;  };

export type CreatorDataAccountDataArgs = {  };


  export function getCreatorDataAccountDataSerializer(): Serializer<CreatorDataAccountDataArgs, CreatorDataAccountData> {
  return mapSerializer<CreatorDataAccountDataArgs, any, CreatorDataAccountData>(struct<CreatorDataAccountData>([['discriminator', array(u8(), { size: 8 })]], { description: 'CreatorDataAccountData' }), (value) => ({ ...value, discriminator: [205, 109, 39, 22, 34, 249, 243, 16] }) ) as Serializer<CreatorDataAccountDataArgs, CreatorDataAccountData>;
}


export function deserializeCreatorData(rawAccount: RpcAccount): CreatorData {
  return deserializeAccount(rawAccount, getCreatorDataAccountDataSerializer());
}

export async function fetchCreatorData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<CreatorData> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'CreatorData');
  return deserializeCreatorData(maybeAccount);
}

export async function safeFetchCreatorData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<CreatorData | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeCreatorData(maybeAccount)
    : null;
}

export async function fetchAllCreatorData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<CreatorData[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'CreatorData');
    return deserializeCreatorData(maybeAccount);
  });
}

export async function safeFetchAllCreatorData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<CreatorData[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCreatorData(maybeAccount as RpcAccount));
}

export function getCreatorDataGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number> }>({ 'discriminator': [0, array(u8(), { size: 8 })] })
    .deserializeUsing<CreatorData>((account) => deserializeCreatorData(account))      .whereField('discriminator', [205, 109, 39, 22, 34, 249, 243, 16])
    ;
}

export function getCreatorDataSize(): number {
  return 8;
}

