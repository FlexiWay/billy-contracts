/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, string, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type TestState = Account<TestStateAccountData>;

  export type TestStateAccountData = { discriminator: Array<number>; name: number; symbol: number; decimals: number;  };

export type TestStateAccountDataArgs = { name: number; symbol: number; decimals: number;  };


  export function getTestStateAccountDataSerializer(): Serializer<TestStateAccountDataArgs, TestStateAccountData> {
  return mapSerializer<TestStateAccountDataArgs, any, TestStateAccountData>(struct<TestStateAccountData>([['discriminator', array(u8(), { size: 8 })], ['name', u8()], ['symbol', u8()], ['decimals', u8()]], { description: 'TestStateAccountData' }), (value) => ({ ...value, discriminator: [203, 82, 55, 144, 15, 73, 182, 18] }) ) as Serializer<TestStateAccountDataArgs, TestStateAccountData>;
}


export function deserializeTestState(rawAccount: RpcAccount): TestState {
  return deserializeAccount(rawAccount, getTestStateAccountDataSerializer());
}

export async function fetchTestState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<TestState> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'TestState');
  return deserializeTestState(maybeAccount);
}

export async function safeFetchTestState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<TestState | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeTestState(maybeAccount)
    : null;
}

export async function fetchAllTestState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<TestState[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TestState');
    return deserializeTestState(maybeAccount);
  });
}

export async function safeFetchAllTestState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<TestState[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTestState(maybeAccount as RpcAccount));
}

export function getTestStateGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('bondingCurve', 'E52KjA58odp3taqmaCuBFdDya3s4TA1ho4tSXoW2igxb');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'name': number, 'symbol': number, 'decimals': number }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'name': [8, u8()], 'symbol': [9, u8()], 'decimals': [10, u8()] })
    .deserializeUsing<TestState>((account) => deserializeTestState(account))      .whereField('discriminator', [203, 82, 55, 144, 15, 73, 182, 18])
    ;
}

export function getTestStateSize(): number {
  return 11;
}

export function findTestStatePda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  ): Pda {
  const programId = context.programs.getPublicKey('bondingCurve', 'E52KjA58odp3taqmaCuBFdDya3s4TA1ho4tSXoW2igxb');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("test-state"),
            ]);
}

export async function fetchTestStateFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
    options?: RpcGetAccountOptions,
): Promise<TestState> {
  return fetchTestState(context, findTestStatePda(context), options);
}

export async function safeFetchTestStateFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
    options?: RpcGetAccountOptions,
): Promise<TestState | null> {
  return safeFetchTestState(context, findTestStatePda(context), options);
}
