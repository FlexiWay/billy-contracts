/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, publicKey as publicKeySerializer, string, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type PlatformDistributor = Account<PlatformDistributorAccountData>;

  export type PlatformDistributorAccountData = { discriminator: Array<number>;  };

export type PlatformDistributorAccountDataArgs = {  };


  export function getPlatformDistributorAccountDataSerializer(): Serializer<PlatformDistributorAccountDataArgs, PlatformDistributorAccountData> {
  return mapSerializer<PlatformDistributorAccountDataArgs, any, PlatformDistributorAccountData>(struct<PlatformDistributorAccountData>([['discriminator', array(u8(), { size: 8 })]], { description: 'PlatformDistributorAccountData' }), (value) => ({ ...value, discriminator: [4, 160, 37, 100, 176, 114, 174, 209] }) ) as Serializer<PlatformDistributorAccountDataArgs, PlatformDistributorAccountData>;
}


export function deserializePlatformDistributor(rawAccount: RpcAccount): PlatformDistributor {
  return deserializeAccount(rawAccount, getPlatformDistributorAccountDataSerializer());
}

export async function fetchPlatformDistributor(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PlatformDistributor> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'PlatformDistributor');
  return deserializePlatformDistributor(maybeAccount);
}

export async function safeFetchPlatformDistributor(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PlatformDistributor | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializePlatformDistributor(maybeAccount)
    : null;
}

export async function fetchAllPlatformDistributor(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PlatformDistributor[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PlatformDistributor');
    return deserializePlatformDistributor(maybeAccount);
  });
}

export async function safeFetchAllPlatformDistributor(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PlatformDistributor[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePlatformDistributor(maybeAccount as RpcAccount));
}

export function getPlatformDistributorGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number> }>({ 'discriminator': [0, array(u8(), { size: 8 })] })
    .deserializeUsing<PlatformDistributor>((account) => deserializePlatformDistributor(account))      .whereField('discriminator', [4, 160, 37, 100, 176, 114, 174, 209])
    ;
}

export function getPlatformDistributorSize(): number {
  return 8;
}

export function findPlatformDistributorPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("platform-distributor-data"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchPlatformDistributorFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPlatformDistributorPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PlatformDistributor> {
  return fetchPlatformDistributor(context, findPlatformDistributorPda(context, seeds), options);
}

export async function safeFetchPlatformDistributorFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPlatformDistributorPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PlatformDistributor | null> {
  return safeFetchPlatformDistributor(context, findPlatformDistributorPda(context, seeds), options);
}
