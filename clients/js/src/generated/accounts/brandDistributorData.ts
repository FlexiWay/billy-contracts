/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type BrandDistributorData = Account<BrandDistributorDataAccountData>;

  export type BrandDistributorDataAccountData = { discriminator: Array<number>;  };

export type BrandDistributorDataAccountDataArgs = {  };


  export function getBrandDistributorDataAccountDataSerializer(): Serializer<BrandDistributorDataAccountDataArgs, BrandDistributorDataAccountData> {
  return mapSerializer<BrandDistributorDataAccountDataArgs, any, BrandDistributorDataAccountData>(struct<BrandDistributorDataAccountData>([['discriminator', array(u8(), { size: 8 })]], { description: 'BrandDistributorDataAccountData' }), (value) => ({ ...value, discriminator: [57, 244, 184, 17, 13, 12, 0, 134] }) ) as Serializer<BrandDistributorDataAccountDataArgs, BrandDistributorDataAccountData>;
}


export function deserializeBrandDistributorData(rawAccount: RpcAccount): BrandDistributorData {
  return deserializeAccount(rawAccount, getBrandDistributorDataAccountDataSerializer());
}

export async function fetchBrandDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BrandDistributorData> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'BrandDistributorData');
  return deserializeBrandDistributorData(maybeAccount);
}

export async function safeFetchBrandDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BrandDistributorData | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeBrandDistributorData(maybeAccount)
    : null;
}

export async function fetchAllBrandDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BrandDistributorData[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BrandDistributorData');
    return deserializeBrandDistributorData(maybeAccount);
  });
}

export async function safeFetchAllBrandDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BrandDistributorData[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBrandDistributorData(maybeAccount as RpcAccount));
}

export function getBrandDistributorDataGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number> }>({ 'discriminator': [0, array(u8(), { size: 8 })] })
    .deserializeUsing<BrandDistributorData>((account) => deserializeBrandDistributorData(account))      .whereField('discriminator', [57, 244, 184, 17, 13, 12, 0, 134])
    ;
}

export function getBrandDistributorDataSize(): number {
  return 8;
}

