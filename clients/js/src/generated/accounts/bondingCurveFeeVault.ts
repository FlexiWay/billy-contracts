/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Option, OptionOrNullable, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, i64, mapSerializer, option, publicKey as publicKeySerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type BondingCurveFeeVault = Account<BondingCurveFeeVaultAccountData>;

  export type BondingCurveFeeVaultAccountData = { discriminator: Array<number>; lastWithdrawTime: Option<bigint>; totalWithdrawn: bigint;  };

export type BondingCurveFeeVaultAccountDataArgs = { lastWithdrawTime: OptionOrNullable<number | bigint>; totalWithdrawn: number | bigint;  };


  export function getBondingCurveFeeVaultAccountDataSerializer(): Serializer<BondingCurveFeeVaultAccountDataArgs, BondingCurveFeeVaultAccountData> {
  return mapSerializer<BondingCurveFeeVaultAccountDataArgs, any, BondingCurveFeeVaultAccountData>(struct<BondingCurveFeeVaultAccountData>([['discriminator', array(u8(), { size: 8 })], ['lastWithdrawTime', option(i64())], ['totalWithdrawn', u64()]], { description: 'BondingCurveFeeVaultAccountData' }), (value) => ({ ...value, discriminator: [249, 114, 21, 67, 135, 40, 110, 105] }) ) as Serializer<BondingCurveFeeVaultAccountDataArgs, BondingCurveFeeVaultAccountData>;
}


export function deserializeBondingCurveFeeVault(rawAccount: RpcAccount): BondingCurveFeeVault {
  return deserializeAccount(rawAccount, getBondingCurveFeeVaultAccountDataSerializer());
}

export async function fetchBondingCurveFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurveFeeVault> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'BondingCurveFeeVault');
  return deserializeBondingCurveFeeVault(maybeAccount);
}

export async function safeFetchBondingCurveFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurveFeeVault | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeBondingCurveFeeVault(maybeAccount)
    : null;
}

export async function fetchAllBondingCurveFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurveFeeVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BondingCurveFeeVault');
    return deserializeBondingCurveFeeVault(maybeAccount);
  });
}

export async function safeFetchAllBondingCurveFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurveFeeVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBondingCurveFeeVault(maybeAccount as RpcAccount));
}

export function getBondingCurveFeeVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'lastWithdrawTime': OptionOrNullable<number | bigint>, 'totalWithdrawn': number | bigint }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'lastWithdrawTime': [8, option(i64())], 'totalWithdrawn': [null, u64()] })
    .deserializeUsing<BondingCurveFeeVault>((account) => deserializeBondingCurveFeeVault(account))      .whereField('discriminator', [249, 114, 21, 67, 135, 40, 110, 105])
    ;
}


export function findBondingCurveFeeVaultPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("bonding-curve-fee-vault"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchBondingCurveFeeVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurveFeeVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurveFeeVault> {
  return fetchBondingCurveFeeVault(context, findBondingCurveFeeVaultPda(context, seeds), options);
}

export async function safeFetchBondingCurveFeeVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurveFeeVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurveFeeVault | null> {
  return safeFetchBondingCurveFeeVault(context, findBondingCurveFeeVaultPda(context, seeds), options);
}
