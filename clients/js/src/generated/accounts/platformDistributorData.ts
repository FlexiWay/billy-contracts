/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type PlatformDistributorData = Account<PlatformDistributorDataAccountData>;

  export type PlatformDistributorDataAccountData = { discriminator: Array<number>;  };

export type PlatformDistributorDataAccountDataArgs = {  };


  export function getPlatformDistributorDataAccountDataSerializer(): Serializer<PlatformDistributorDataAccountDataArgs, PlatformDistributorDataAccountData> {
  return mapSerializer<PlatformDistributorDataAccountDataArgs, any, PlatformDistributorDataAccountData>(struct<PlatformDistributorDataAccountData>([['discriminator', array(u8(), { size: 8 })]], { description: 'PlatformDistributorDataAccountData' }), (value) => ({ ...value, discriminator: [104, 40, 4, 1, 112, 71, 205, 61] }) ) as Serializer<PlatformDistributorDataAccountDataArgs, PlatformDistributorDataAccountData>;
}


export function deserializePlatformDistributorData(rawAccount: RpcAccount): PlatformDistributorData {
  return deserializeAccount(rawAccount, getPlatformDistributorDataAccountDataSerializer());
}

export async function fetchPlatformDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PlatformDistributorData> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'PlatformDistributorData');
  return deserializePlatformDistributorData(maybeAccount);
}

export async function safeFetchPlatformDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PlatformDistributorData | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializePlatformDistributorData(maybeAccount)
    : null;
}

export async function fetchAllPlatformDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PlatformDistributorData[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PlatformDistributorData');
    return deserializePlatformDistributorData(maybeAccount);
  });
}

export async function safeFetchAllPlatformDistributorData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PlatformDistributorData[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePlatformDistributorData(maybeAccount as RpcAccount));
}

export function getPlatformDistributorDataGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number> }>({ 'discriminator': [0, array(u8(), { size: 8 })] })
    .deserializeUsing<PlatformDistributorData>((account) => deserializePlatformDistributorData(account))      .whereField('discriminator', [104, 40, 4, 1, 112, 71, 205, 61])
    ;
}

export function getPlatformDistributorDataSize(): number {
  return 8;
}

