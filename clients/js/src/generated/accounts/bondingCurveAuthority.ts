/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, publicKey as publicKeySerializer, string, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type BondingCurveAuthority = Account<BondingCurveAuthorityAccountData>;

  export type BondingCurveAuthorityAccountData = { discriminator: Array<number>; bump: number;  };

export type BondingCurveAuthorityAccountDataArgs = { bump: number;  };


  export function getBondingCurveAuthorityAccountDataSerializer(): Serializer<BondingCurveAuthorityAccountDataArgs, BondingCurveAuthorityAccountData> {
  return mapSerializer<BondingCurveAuthorityAccountDataArgs, any, BondingCurveAuthorityAccountData>(struct<BondingCurveAuthorityAccountData>([['discriminator', array(u8(), { size: 8 })], ['bump', u8()]], { description: 'BondingCurveAuthorityAccountData' }), (value) => ({ ...value, discriminator: [195, 159, 228, 9, 136, 58, 81, 248] }) ) as Serializer<BondingCurveAuthorityAccountDataArgs, BondingCurveAuthorityAccountData>;
}


export function deserializeBondingCurveAuthority(rawAccount: RpcAccount): BondingCurveAuthority {
  return deserializeAccount(rawAccount, getBondingCurveAuthorityAccountDataSerializer());
}

export async function fetchBondingCurveAuthority(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurveAuthority> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'BondingCurveAuthority');
  return deserializeBondingCurveAuthority(maybeAccount);
}

export async function safeFetchBondingCurveAuthority(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BondingCurveAuthority | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeBondingCurveAuthority(maybeAccount)
    : null;
}

export async function fetchAllBondingCurveAuthority(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurveAuthority[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BondingCurveAuthority');
    return deserializeBondingCurveAuthority(maybeAccount);
  });
}

export async function safeFetchAllBondingCurveAuthority(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BondingCurveAuthority[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBondingCurveAuthority(maybeAccount as RpcAccount));
}

export function getBondingCurveAuthorityGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('billyBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'bump': number }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'bump': [8, u8()] })
    .deserializeUsing<BondingCurveAuthority>((account) => deserializeBondingCurveAuthority(account))      .whereField('discriminator', [195, 159, 228, 9, 136, 58, 81, 248])
    ;
}

export function getBondingCurveAuthoritySize(): number {
  return 9;
}

export function findBondingCurveAuthorityPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('billyBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("bonding-curve-authority"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchBondingCurveAuthorityFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurveAuthorityPda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurveAuthority> {
  return fetchBondingCurveAuthority(context, findBondingCurveAuthorityPda(context, seeds), options);
}

export async function safeFetchBondingCurveAuthorityFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBondingCurveAuthorityPda>[1],
    options?: RpcGetAccountOptions,
): Promise<BondingCurveAuthority | null> {
  return safeFetchBondingCurveAuthority(context, findBondingCurveAuthorityPda(context, seeds), options);
}
