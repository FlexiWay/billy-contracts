/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, publicKey as publicKeySerializer, string, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type PresaleDistributor = Account<PresaleDistributorAccountData>;

  export type PresaleDistributorAccountData = { discriminator: Array<number>;  };

export type PresaleDistributorAccountDataArgs = {  };


  export function getPresaleDistributorAccountDataSerializer(): Serializer<PresaleDistributorAccountDataArgs, PresaleDistributorAccountData> {
  return mapSerializer<PresaleDistributorAccountDataArgs, any, PresaleDistributorAccountData>(struct<PresaleDistributorAccountData>([['discriminator', array(u8(), { size: 8 })]], { description: 'PresaleDistributorAccountData' }), (value) => ({ ...value, discriminator: [135, 93, 35, 49, 195, 48, 236, 61] }) ) as Serializer<PresaleDistributorAccountDataArgs, PresaleDistributorAccountData>;
}


export function deserializePresaleDistributor(rawAccount: RpcAccount): PresaleDistributor {
  return deserializeAccount(rawAccount, getPresaleDistributorAccountDataSerializer());
}

export async function fetchPresaleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PresaleDistributor> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'PresaleDistributor');
  return deserializePresaleDistributor(maybeAccount);
}

export async function safeFetchPresaleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PresaleDistributor | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializePresaleDistributor(maybeAccount)
    : null;
}

export async function fetchAllPresaleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PresaleDistributor[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PresaleDistributor');
    return deserializePresaleDistributor(maybeAccount);
  });
}

export async function safeFetchAllPresaleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PresaleDistributor[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePresaleDistributor(maybeAccount as RpcAccount));
}

export function getPresaleDistributorGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number> }>({ 'discriminator': [0, array(u8(), { size: 8 })] })
    .deserializeUsing<PresaleDistributor>((account) => deserializePresaleDistributor(account))      .whereField('discriminator', [135, 93, 35, 49, 195, 48, 236, 61])
    ;
}

export function getPresaleDistributorSize(): number {
  return 8;
}

export function findPresaleDistributorPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('lmaofunBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("presale-distributor-data"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchPresaleDistributorFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPresaleDistributorPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PresaleDistributor> {
  return fetchPresaleDistributor(context, findPresaleDistributorPda(context, seeds), options);
}

export async function safeFetchPresaleDistributorFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPresaleDistributorPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PresaleDistributor | null> {
  return safeFetchPresaleDistributor(context, findPresaleDistributorPda(context, seeds), options);
}
