/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { GetDataEnumKind, GetDataEnumKindContent, Serializer, dataEnum, f64, struct, tuple, u64 } from '@metaplex-foundation/umi/serializers';


export type SegmentType = { __kind: "Constant", fields: [bigint];  } | { __kind: "Linear", fields: [number, number];  } | { __kind: "Exponential", fields: [number, number, number];  };

export type SegmentTypeArgs = { __kind: "Constant", fields: [number | bigint];  } | { __kind: "Linear", fields: [number, number];  } | { __kind: "Exponential", fields: [number, number, number];  };


export function getSegmentTypeSerializer(): Serializer<SegmentTypeArgs, SegmentType> {
  return dataEnum<SegmentType>([['Constant', struct<GetDataEnumKindContent<SegmentType, 'Constant'>>([['fields', tuple([u64()])]])], ['Linear', struct<GetDataEnumKindContent<SegmentType, 'Linear'>>([['fields', tuple([f64(), f64()])]])], ['Exponential', struct<GetDataEnumKindContent<SegmentType, 'Exponential'>>([['fields', tuple([f64(), f64(), f64()])]])]], { description: 'SegmentType' }) as Serializer<SegmentTypeArgs, SegmentType>;
}


      // Data Enum Helpers.
            export function segmentType(kind: 'Constant', data: GetDataEnumKindContent<SegmentTypeArgs, 'Constant'>['fields']): GetDataEnumKind<SegmentTypeArgs, 'Constant'>;
                export function segmentType(kind: 'Linear', data: GetDataEnumKindContent<SegmentTypeArgs, 'Linear'>['fields']): GetDataEnumKind<SegmentTypeArgs, 'Linear'>;
                export function segmentType(kind: 'Exponential', data: GetDataEnumKindContent<SegmentTypeArgs, 'Exponential'>['fields']): GetDataEnumKind<SegmentTypeArgs, 'Exponential'>;
        export function segmentType<K extends SegmentTypeArgs['__kind']>(
    kind: K,
    data?: any,
  ): Extract<SegmentTypeArgs, { __kind: K }> {
    return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
  }
  export function isSegmentType<K extends SegmentType['__kind']>(
    kind: K,
    value: SegmentType,
  ): value is SegmentType & { __kind: K } {
    return value.__kind === kind;
  };
