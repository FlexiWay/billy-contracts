/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, struct, u8 } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type CurveConfigUpdateAuthorityInstructionAccounts = {
    creator: Signer;
    brandAuthority: PublicKey | Pda;
    cexAuthority: PublicKey | Pda;
    mint: PublicKey | Pda;
    bondingCurve: PublicKey | Pda;
    global: PublicKey | Pda;
    eventAuthority: PublicKey | Pda;
    program: PublicKey | Pda;
};

  // Data.
  export type CurveConfigUpdateAuthorityInstructionData = { discriminator: Array<number>;  };

export type CurveConfigUpdateAuthorityInstructionDataArgs = {  };


  export function getCurveConfigUpdateAuthorityInstructionDataSerializer(): Serializer<CurveConfigUpdateAuthorityInstructionDataArgs, CurveConfigUpdateAuthorityInstructionData> {
  return mapSerializer<CurveConfigUpdateAuthorityInstructionDataArgs, any, CurveConfigUpdateAuthorityInstructionData>(struct<CurveConfigUpdateAuthorityInstructionData>([['discriminator', array(u8(), { size: 8 })]], { description: 'CurveConfigUpdateAuthorityInstructionData' }), (value) => ({ ...value, discriminator: [63, 34, 177, 50, 87, 22, 186, 111] }) ) as Serializer<CurveConfigUpdateAuthorityInstructionDataArgs, CurveConfigUpdateAuthorityInstructionData>;
}




// Instruction.
export function curveConfigUpdateAuthority(
  context: Pick<Context, "programs">,
                        input: CurveConfigUpdateAuthorityInstructionAccounts,
      ): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('billyBondingCurve', '71odFTZ59cG8yyBtEZrnJdBYaepzri2A12hEc16vK6WP');

  // Accounts.
  const resolvedAccounts = {
          creator: { index: 0, isWritable: true as boolean, value: input.creator ?? null },
          brandAuthority: { index: 1, isWritable: false as boolean, value: input.brandAuthority ?? null },
          cexAuthority: { index: 2, isWritable: false as boolean, value: input.cexAuthority ?? null },
          mint: { index: 3, isWritable: false as boolean, value: input.mint ?? null },
          bondingCurve: { index: 4, isWritable: true as boolean, value: input.bondingCurve ?? null },
          global: { index: 5, isWritable: false as boolean, value: input.global ?? null },
          eventAuthority: { index: 6, isWritable: false as boolean, value: input.eventAuthority ?? null },
          program: { index: 7, isWritable: false as boolean, value: input.program ?? null },
      } satisfies ResolvedAccountsWithIndices;

  
  
  // Accounts in order.
      const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a,b) => a.index - b.index);
  
  
  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
      const data = getCurveConfigUpdateAuthorityInstructionDataSerializer().serialize({});
  
  // Bytes Created On Chain.
      const bytesCreatedOnChain = 0;
  
  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
